{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\idontmind\\\\Desktop\\\\web3-master\\\\secondLab\\\\src\\\\components\\\\Current\\\\CurrentCity.js\";\nimport React, { Component } from 'react';\nimport { getHeader, getInfo } from \"../../util/City\";\nimport { CurrentCityHeader } from \"./CurrentCityHeader\";\nimport { CityInfo } from \"../CityCommon/CityInfo\"; // import {CityInfo}\n\nexport class CurrentCity extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeather = async coords => {\n      this.setState({\n        downloading: true\n      });\n      await fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(coords.latitude, \"&lon=\").concat(coords.longitude, \"&appid=2e19bb27bd5e717bac388dc0c1827b17\")).then(response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n\n        return response;\n      }).then(response => response.json()).then(response => {\n        this.setState({\n          cityHeader: getHeader(response),\n          cityInfo: getInfo(response),\n          error: false,\n          downloading: false\n        });\n      }).catch(err => {\n        this.setState({\n          error: true,\n          downloading: false\n        });\n      });\n    };\n\n    this.state = {\n      cityHeader: '',\n      cityInfo: '',\n      downloading: true,\n      error: false\n    };\n  }\n\n  render() {\n    return this.state.downloading ? React.createElement(\"div\", {\n      className: \"text-center \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"\\u041F\\u043E\\u0434\\u043E\\u0436\\u0434\\u0438\\u0442\\u0435, \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u044E\\u0442\\u0441\\u044F\"), React.createElement(\"div\", {\n      className: \"spinner-border text-secondary spin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    })) : this.state.error ? React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"\\u041E\\u0439, \\u0447\\u0442\\u043E-\\u0442\\u043E \\u043F\\u043E\\u0448\\u043B\\u043E \\u043D\\u0435 \\u0442\\u0430\\u043A\")) : React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(CurrentCityHeader, {\n      data: this.state.cityHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(CityInfo, {\n      data: this.state.cityInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    })));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.state === prevState) {\n      this.getWeather(this.props.position);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/idontmind/Desktop/web3-master/secondLab/src/components/Current/CurrentCity.js"],"names":["React","Component","getHeader","getInfo","CurrentCityHeader","CityInfo","CurrentCity","constructor","props","getWeather","coords","setState","downloading","fetch","latitude","longitude","then","response","ok","Error","statusText","json","cityHeader","cityInfo","error","catch","err","state","render","componentDidUpdate","prevProps","prevState","snapshot","position"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,SAAR,EAAmBC,OAAnB,QAAiC,iBAAjC;AACA,SAAQC,iBAAR,QAAgC,qBAAhC;AACA,SAAQC,QAAR,QAAuB,wBAAvB,C,CAEA;;AAEA,OAAO,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAEvCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmCnBC,UAnCmB,GAmCN,MAAOC,MAAP,IAAkB;AAC3B,WAAKC,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAE;AAAd,OAAd;AACA,YAAMC,KAAK,+DAAwDH,MAAM,CAACI,QAA/D,kBAA+EJ,MAAM,CAACK,SAAtF,6CAAL,CACDC,IADC,CACKC,QAAD,IAAc;AAChB,YAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,gBAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACH;;AACD,eAAOH,QAAP;AACH,OANC,EAODD,IAPC,CAOKC,QAAD,IAAcA,QAAQ,CAACI,IAAT,EAPlB,EAQDL,IARC,CAQKC,QAAD,IAAc;AAChB,aAAKN,QAAL,CAAc;AACVW,UAAAA,UAAU,EAAEpB,SAAS,CAACe,QAAD,CADX;AAEVM,UAAAA,QAAQ,EAAEpB,OAAO,CAACc,QAAD,CAFP;AAGVO,UAAAA,KAAK,EAAE,KAHG;AAIVZ,UAAAA,WAAW,EAAE;AAJH,SAAd;AAMH,OAfC,EAgBDa,KAhBC,CAgBKC,GAAG,IAAI;AACN,aAAKf,QAAL,CAAc;AACVa,UAAAA,KAAK,EAAE,IADG;AAEVZ,UAAAA,WAAW,EAAE;AAFH,SAAd;AAIH,OArBH,CAAN;AAwBH,KA7DkB;;AAEf,SAAKe,KAAL,GAAa;AACTL,MAAAA,UAAU,EAAE,EADH;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTX,MAAAA,WAAW,EAAE,IAHJ;AAITY,MAAAA,KAAK,EAAE;AAJE,KAAb;AAMH;;AAEDI,EAAAA,MAAM,GAAG;AACL,WAAQ,KAAKD,KAAL,CAAWf,WAAZ,GACD;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yKADF,EAEE;AAAK,MAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADC,GAMA,KAAKe,KAAL,CAAWH,KAAZ,GACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sHADF,CADJ,GAII;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,oBAAC,iBAAD;AAAmB,MAAA,IAAI,EAAE,KAAKG,KAAL,CAAWL,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,EAEE;AAAK,MAAA,SAAS,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE,KAAKK,KAAL,CAAWJ,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFF,CAVV;AAgBH;;AAEDM,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAI,KAAKL,KAAL,KAAeI,SAAnB,EAA8B;AAC1B,WAAKtB,UAAL,CAAgB,KAAKD,KAAL,CAAWyB,QAA3B;AACH;AACJ;;AAnCsC","sourcesContent":["import React, {Component} from 'react';\nimport {getHeader, getInfo} from \"../../util/City\";\nimport {CurrentCityHeader} from \"./CurrentCityHeader\";\nimport {CityInfo} from \"../CityCommon/CityInfo\";\n\n// import {CityInfo}\n\nexport class CurrentCity extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cityHeader: '',\n            cityInfo: '',\n            downloading: true,\n            error: false\n        };\n    }\n\n    render() {\n        return (this.state.downloading)\n            ? <div className=\"text-center \">\n                <div className=\"title\">Подождите, данные загружаются</div>\n                <div className=\"spinner-border text-secondary spin\">\n                </div>\n            </div>\n            : (this.state.error)\n                ? <div className=\"text-center\">\n                    <span className=\"title\">Ой, что-то пошло не так</span>\n                </div>\n                : <div className=\"row\">\n                        <CurrentCityHeader data={this.state.cityHeader}/>\n                    <div className={\"col-6\"}>\n                        <CityInfo data={this.state.cityInfo}/>\n                    </div>\n                </div>\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state === prevState) {\n            this.getWeather(this.props.position)\n        }\n    }\n\n    getWeather = async (coords) => {\n        this.setState({downloading: true});\n        await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.latitude}&lon=${coords.longitude}&appid=2e19bb27bd5e717bac388dc0c1827b17`)\n            .then((response) => {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response;\n            })\n            .then((response) => response.json())\n            .then((response) => {\n                this.setState({\n                    cityHeader: getHeader(response),\n                    cityInfo: getInfo(response),\n                    error: false,\n                    downloading: false\n                });\n            })\n            .catch(err => {\n                    this.setState({\n                        error: true,\n                        downloading: false\n                    });\n                }\n            );\n\n    };\n\n\n}\n"]},"metadata":{},"sourceType":"module"}